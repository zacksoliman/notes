* ICE/TURN/STUN and SIP

** NAT Behavioral Requirements

*** Address and Port Mapping



** STUN (Notes from RFC 8489)

*** Overview

- Provides means for an endpoint to determine the IP addr. and port allocated by a NAT that corresponds
  to its private IP addr. and port.
- Provides a way for endpoints to keep NAT binding alive.
- With some extensions (ICE RFC 8445) STUN can be used to do connectivity checks between endpoints
- Can also relay packets between endpoints (TURN)

**** STUN Usages
- STUN is intended to be used in the context of one or more NAT traversal solutions.
- These solutions are known as *STUN usages*. Describe how STUN is used to achieve NAT traversal.
- A usage typically indicates when STUN message is sent, which oprional attr. to include, what server is used and what auth mechanism is used.
- ICE is one usage, SIP outbound is another usage (RFC 5626)

- STUN is a server-client protocol. Supports 2 types of transactions:
  - request/response
  - indication transaction, in which an agent (client or server) sends an indication that generates no response.
  - Transactions include a transaction ID, randomly selected 96-bit number.

- All STUN messages start with a fixed header that includes a *method*, a *class* and the *transaction ID*.
  - *Class*: Indicates whether this is a request, success/error response or an indication.
  - *Method*: RFC 8489 only defines Binding method

*Reflexive Transport Address*: When a /Binding/ requests is sent to a STUN server from a client, It might pass
                               through one or more NATs. As the request passes through a NAT, the NAT will 
			       modify the source transport address of the packet. As a result the source transport
			       address will be the public IP:port created by the NAT closest to the server.
			       This is called a /reflexive transport address/.

- The reflexive transport addr. is copied into an XOR-MAPPED-ADDRESS IP attribute int the STUN binding response.
  As the packet is passes back through a NAT, the NAT will modify the destination transport addr. in the IP
  header but the XOR-MAPPED-ADDRESS attribute will remain untouched. This allows the client to learn its reflexive
  address allocated by the outermost NAT with respect to the STUN server.

- In some usages, STUN must be multiplexed with other protocols (e.g. ICE (RFC 8445) and SIP (RFC 5626))


Note for later read about XOR-MAPPED-ADDRESS attr. (this might help: https://www.netmanias.com/en/post/techdocs/6067/nat-network-protocol/nat-behavior-discovery-using-stun-rfc-5780)

** TURN

*** Overview

- Hosts behind NAT can communicate with another host that can also be begind a NAT using a technique called *hole punching* (RFC 5128)
  - Attempts to discover a direct communication path
  - Will fail if both hosts are behind NATs that are not well behaved (see RFC5128, RFC4787)
  - Address dependent mapping or address and port dependent mapping for example (RFC4787) (Look up why?)

- TURN allows a host behind NATs (TURN client) to request that another host (TURN server) act as a relay.
  - Client obtains a relayed transport address, an IP address and port on the server. 
    Server relays, to the client, transport protocol data from the packet sent to this relayed transport address.
  - Data encapsulated within a message header to allow client to know which peer sent data.

- Client needs a way to communicate the relayed transoprt address to it's peers and to learn each peer's IP address and port.
  - Out of scope of TURN spec
  - If TURN used with ICE (RFC 8445) then relayed transport addr and IP:port of peers are included in the ICE candidate information
  - RDV protocol can then carry these candidates in the body of SIP message (SDP-ICE)
  - If used with other rdv protocol ICE provides guidance on the services the rdv protocol must perform.

- TURN servers need to be high bandwwidth. Thus it is preferable to use it as a relay server only when a direct communication path is imposible

- When a client or peer uses ICE to determine comm. path, ICE will try to use hole punching techniques to search for a direct path first.

- TURN was originally invented to support multimedia sessions signaled using SIP. SIP supports forking => TURN supports multiple peers per relayed transport addr.

- TURN designed as one piece of the larger ICE approach to NAT traversal.

- TURN is an extention of STUN protocol
  
